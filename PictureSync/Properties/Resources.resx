<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Program_Main_Exit" xml:space="preserve">
    <value>Exit</value>
  </data>
  <data name="Program_Main_Hide" xml:space="preserve">
    <value>Hide</value>
  </data>
  <data name="Program_Main_Bot_started_log" xml:space="preserve">
    <value>Bot started</value>
  </data>
  <data name="Program_Main_Show" xml:space="preserve">
    <value>Show</value>
  </data>
  <data name="Program_Main_Bot_stopped_log" xml:space="preserve">
    <value>Bot stopped</value>
  </data>
  <data name="TelegramBot_picture_accepted" xml:space="preserve">
    <value>Picture accepted.</value>
  </data>
  <data name="TelegramBot_picture_accepted_uncompressed" xml:space="preserve">
    <value>Accepted uncompressed picture.</value>
  </data>
  <data name="TelegramBot_picture_accepted_log" xml:space="preserve">
    <value>picture accepted from</value>
  </data>
  <data name="TelegramBot_picture_compression_autoenable_log" xml:space="preserve">
    <value>autoenable compression for</value>
  </data>
  <data name="TelegramBot_picture_compression_autoenable" xml:space="preserve">
    <value>Image compressing is active again.</value>
  </data>
  <data name="TelegramBot_picture_wrong_filetype" xml:space="preserve">
    <value>Error. Wrong file type.</value>
  </data>
  <data name="TelegramBot_picture_wrong_filetype_log" xml:space="preserve">
    <value>Error, wrong file type from</value>
  </data>
  <data name="TelegramBot_picture_saved_as_log" xml:space="preserve">
    <value>as</value>
  </data>
  <data name="TelegramBot_Bot_OnMessage_deny_picture" xml:space="preserve">
    <value>Picture not accepted. Please send as file.</value>
  </data>
  <data name="TelegramBot_Bot_OnMessage_deny_picture_log" xml:space="preserve">
    <value>tried to send a picture, but sent not as file.</value>
  </data>
  <data name="TelegramBot_Bot_OnMessage_document_incoming_log" xml:space="preserve">
    <value>Document incoming from</value>
  </data>
  <data name="TelegramBot_Bot_OnMessage_auth_successful_log" xml:space="preserve">
    <value>has just authenticated a new telegram account</value>
  </data>
  <data name="TelegramBot_Bot_OnMessage_auth_successful" xml:space="preserve">
    <value>Authentification successful.</value>
  </data>
  <data name="TelegramBot_Bot_OnMessage_auth_not_successful_log" xml:space="preserve">
    <value>tried to authenticate, but entered wrong password.</value>
  </data>
  <data name="TelegramBot_Bot_OnMessage_auth_not_successful" xml:space="preserve">
    <value>Authentication error.</value>
  </data>
  <data name="TelegramBot_Bot_OnMessage_auth_no_username" xml:space="preserve">
    <value>Authentication error. Have you set a username?</value>
  </data>
  <data name="TelegramBot_Date_taken_no_capturetime" xml:space="preserve">
    <value>Photo has no capture time (using servertime instead) from</value>
  </data>
  <data name="TelegramBot_AdminCommands_activity_accessed" xml:space="preserve">
    <value>accessed activity</value>
  </data>
  <data name="TelegramBot_AdminCommands_party" xml:space="preserve">
    <value>You enabled the partymode. YAY!</value>
  </data>
  <data name="TelegramBot_CommonCommands_commands" xml:space="preserve">
    <value>Commands:</value>
  </data>
  <data name="TelegramBot_CommonCommands_help_activity_amount" xml:space="preserve">
    <value>/activity_amount - Displays amount of pictures sent per user</value>
  </data>
  <data name="TelegramBot_CommonCommands_help_activity_time" xml:space="preserve">
    <value>/activity_time - Displays date when users were last time active</value>
  </data>
  <data name="TelegramBot_CommonCommands_help_coff" xml:space="preserve">
    <value>/coff - Disable comression for one picture</value>
  </data>
  <data name="TelegramBot_CommonCommands_help_con" xml:space="preserve">
    <value>/con - enable compression</value>
  </data>
  <data name="TelegramBot_CommonCommands_help_admin" xml:space="preserve">
    <value>/admin &lt;pw&gt; - Authenticate as admin</value>
  </data>
  <data name="TelegramBot_CommonCommands_help_auth" xml:space="preserve">
    <value>/auth &lt;pw&gt; - Authenticates a new user</value>
  </data>
  <data name="TelegramBot_CommonCommands_help_help" xml:space="preserve">
    <value>/help - Displays this text</value>
  </data>
  <data name="TelegramBot_CommonCommands_admin_successful_log" xml:space="preserve">
    <value>has just authenticated as Admin</value>
  </data>
  <data name="TelegramBot_CommonCommands_admin_successful" xml:space="preserve">
    <value>You are now a Admin.</value>
  </data>
  <data name="TelegramBot_CommonCommands_admin_not_successful_log" xml:space="preserve">
    <value>tried to get admin, but entered wrong password</value>
  </data>
  <data name="TelegramBot_CommonCommands_admin_not_successful" xml:space="preserve">
    <value>Failed. You have no Admin rights.</value>
  </data>
  <data name="TelegramBot_CommonCommands_coff_log" xml:space="preserve">
    <value>disabled compression</value>
  </data>
  <data name="TelegramBot_CommonCommands_coff" xml:space="preserve">
    <value>Compression is disabled for the next picture.</value>
  </data>
  <data name="TelegramBot_CommonCommands_con_log" xml:space="preserve">
    <value>enabled compression</value>
  </data>
  <data name="TelegramBot_CommonCommands_con" xml:space="preserve">
    <value>Compression is enabled.</value>
  </data>
  <data name="TelegramBot_CommonCommands_Note_log" xml:space="preserve">
    <value>Note:</value>
  </data>
  <data name="TelegramBot_CommonCommands_nocommand" xml:space="preserve">
    <value>Can´t parse command.</value>
  </data>
  <assembly alias="System.Windows.Forms" name="System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
  <data name="icon" type="System.Resources.ResXFileRef, System.Windows.Forms">
    <value>..\Resources\icon.ico;System.Drawing.Icon, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a</value>
  </data>
  <data name="TelegramBot_CommonCommands_help_change_pw" xml:space="preserve">
    <value>/pwedit &lt;old&gt; &lt;new&gt; - Changes the password</value>
  </data>
  <data name="TelegramBot_CommonCommands_help_clear_activity" xml:space="preserve">
    <value>/clear_activity - Clears all stored activities</value>
  </data>
  <data name="TelegramBot_CommonCommands_help_clear_amount" xml:space="preserve">
    <value>/clear_amount - Clears amount counters</value>
  </data>
  <data name="TelegramBot_CommonCommands_help_log" xml:space="preserve">
    <value>/log - Returns the last 100 lines of the log</value>
  </data>
  <data name="TelegramBot_CommonCommands_help_add_user" xml:space="preserve">
    <value>/add_user &lt;user&gt; - Adds a new user</value>
  </data>
  <data name="TelegramBot_AdminCommands_add_user_success_log" xml:space="preserve">
    <value>succesfully added</value>
  </data>
  <data name="TelegramBot_AdminCommands_add_user_success" xml:space="preserve">
    <value>successfully added</value>
  </data>
  <data name="TelegramBot_AdminCommands_log_accessed" xml:space="preserve">
    <value>accessed log</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Error</value>
  </data>
  <data name="Success" xml:space="preserve">
    <value>Success</value>
  </data>
</root>